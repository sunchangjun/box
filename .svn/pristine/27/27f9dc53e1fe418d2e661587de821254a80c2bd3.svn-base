package framework.controller;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

import framework.common.CollectionUtils;
import framework.common.JSONText;
import framework.common.result.Code;
import framework.common.result.Message;
import framework.common.result.Result;
import framework.dao.CommodityCateRepository;
import framework.entity.po.CommodityCate;
import framework.service.CommodityCateService;

@Controller
@RequestMapping("/back/commodityCate")
public class CommodityCateController {
	
	@Autowired
	CommodityCateRepository commodityCateRepository;
	
	@Autowired
	CommodityCateService commodityCateService;
	
	@RequestMapping(value = "/getCommodityCateList")
	@ResponseBody
	public Result getCommodityCateList() {
		JSONArray ja=new JSONArray();
		try {
			List<CommodityCate>		list=	commodityCateRepository.findAll();
			if(CollectionUtils.isNotEmpty(list)) {
				for (CommodityCate commodityCate : list) {
					JSONObject jo=JSONText.JavaBeanToJsonObject(commodityCate);
					ja.add(jo);
				}
				
			}
		} catch (Exception e) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0001);
			message.setErrmsg(Code.GWSMSG0001);
			return Result.setData(false, message);
		}		
		return Result.setData(true, ja);
	}
	
	@RequestMapping(value = "/getOneCommodityCate")
	@ResponseBody
	public Result getOneCommodityCate(Long commodityCateId) {
		if(null == commodityCateId) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0003);
			message.setErrmsg(Code.GWSMSG0003);
			return Result.setData(false, message);
		}
		JSONObject jo=null;
		try {
			CommodityCate	 dbCommodityCate=	commodityCateRepository.findOne(commodityCateId);
			if(null != dbCommodityCate) {
				jo=JSONText.JavaBeanToJsonObject(dbCommodityCate);
			}
		} catch (Exception e) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0001);
			message.setErrmsg(Code.GWSMSG0001);
			return Result.setData(false, message);
		}
		return Result.setData(true, jo);
	}
	
	
	@RequestMapping(value = "/addOrUpdateCommodityCate")
	@ResponseBody
	public Result addOrUpdateCommodityCate( CommodityCate commodityCate) {
		
	if(StringUtils.isBlank(commodityCate.getCommodityCateAlias()) ||  StringUtils.isBlank(commodityCate.getCommodityCateName()) ) {
		Message message = new Message();
		message.setErrno(Code.GWSCOD0003);
		message.setErrmsg(Code.GWSMSG0003);
		return Result.setData(false, message);
	}
	//保存
	JSONObject jo=null;
	try {	
		if(null!=commodityCate.getCommodityCateId()) {//xiugai
			CommodityCate dbCommodityCate=	commodityCateRepository.findOne(commodityCate.getCommodityCateId());
			dbCommodityCate.setCommodityCateAlias(commodityCate.getCommodityCateAlias());
			dbCommodityCate.setCommodityCateName(commodityCate.getCommodityCateName());
			dbCommodityCate.setPicUrl(commodityCate.getPicUrl());
			CommodityCate	dbReturnCommodityCate=	commodityCateService.addOrUpdateCommodityCate(dbCommodityCate);
			if(null != dbReturnCommodityCate) {
				jo=JSONText.JavaBeanToJsonObject(dbReturnCommodityCate);
			}
		}else {
			CommodityCate	dbReturnCommodityCate=	commodityCateService.addOrUpdateCommodityCate(commodityCate);
			if(null != dbReturnCommodityCate) {
				jo=JSONText.JavaBeanToJsonObject(dbReturnCommodityCate);
			}
		}
		
	} catch (Exception e) {
		Message message = new Message();
		message.setErrno(Code.GWSCOD0001);
		message.setErrmsg(Code.GWSMSG0001);
		return Result.setData(false, message);
	}
		return Result.setData(true, jo);
	}
	
	/**
	 * 删除
	 * @return
	 */
	@RequestMapping(value = "/deleteCommodityCate")
	@ResponseBody
	public Result deleteCommodityCate(Long commodityCateId) {
		if(null == commodityCateId) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0003);
			message.setErrmsg(Code.GWSMSG0003);
			return Result.setData(false, message);
		}
		CommodityCate dbCommodityCate=	commodityCateRepository.findOne(commodityCateId);
		if(null == dbCommodityCate) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0003);
			message.setErrmsg(Code.GWSMSG0003);
			return Result.setData(false, message);
		}
		boolean bool=false;
		try {
			commodityCateService.delete(commodityCateId);
			bool=true;
		} catch (Exception e) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0001);
			message.setErrmsg(Code.GWSMSG0001);
			return Result.setData(false, message);
		}
		
		return Result.setData(true, bool);
	}
	
	@RequestMapping(value = "/getCommodityCateMap")
	@ResponseBody
	public Result getCommodityCateMap() {
		JSONArray ja=new JSONArray();
		List<CommodityCate> commodityCateList=commodityCateRepository.findAll();
		if(CollectionUtils.isNotEmpty(commodityCateList)) {
			for (CommodityCate commodityCate : commodityCateList) {
				ja.add(JSONText.JavaBeanToJsonObject(commodityCate));		
			}		
		}	
		return Result.setData(true, ja);
	}
	

}
