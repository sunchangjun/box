package framework.controller;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

import framework.box.Data;
import framework.box.ResponseData;
import framework.common.CollectionUtils;
import framework.common.result.Code;
import framework.common.result.Message;
import framework.common.result.Result;
import framework.dao.BoxPortRepository;
import framework.dao.BoxRepository;
import framework.dao.CommodityRoadRepository;
import framework.dao.OrderCommodityRoadRepository;
import framework.dao.OrderRepository;
import framework.dao.OrderStateRcdRepository;
import framework.entity.po.Box;
import framework.entity.po.BoxPort;
import framework.entity.po.CommodityRoad;
import framework.entity.po.Order;
import framework.entity.po.OrderCommodityRoad;
import framework.entity.po.OrderStateRcd;
import framework.enums.IsDeleteEnum;
import framework.enums.OrderStatusEnum;
import framework.enums.Success;
import framework.mqtt.MQttUtil;
import framework.mqtt.util.MacSignature;
import framework.pojo.DataType;
import framework.pojo.Request;
import framework.service.OrderService;
import framework.service.OrderStateRcdService;
import framework.service.TransactionService;
import framework.web.controller.IBase64;
import framework.web.controller.IndexController;

@Controller
@RequestMapping("/transaction")
public class TransactionController {
	/**
	 * 业务流程: 商品管理由本服务器维护 1,柜机请求并缓存所有本柜机有的货道内商品列表
	 * 2.用户看中某个商品,点击某个商品,选择数量,点击确定,向服务器发送请求(柜机id,商品id,数量)生成二维码
	 * 3.用户扫描二维码,请求柜机服务器,生成订单,柜机服务器生成订单后,重定向到天点服务器,调用户的支付
	 * 4.支付成功后,天点服务器向柜机服务器返回数据(支付时间,支付成功失败),成功出货,失败调重试或取消订单
	 * 5.柜机服务器收到支付成功请求后,按照算法计算出货货道,调用发送命令sdk,发送命令
	 * 6.sdk成功后,返回结果给柜机服务器,柜机服务器通知天点服务器,失败同理
	 */

	private static Logger log = LoggerFactory.getLogger(TransactionController.class);

	@Autowired
	private CommodityRoadRepository commodityRoadRepository;

	@Autowired
	private BoxPortRepository boxPortRepository;

	@Autowired
	private OrderService orderService;

	@Autowired
	private OrderRepository orderRepository;

	@Autowired
	private TransactionService transactionService;

	@Autowired
	private OrderStateRcdRepository orderStateRcdRepository;

	@Autowired
	private OrderStateRcdService orderStateRcdService;

	@Autowired
	private OrderCommodityRoadRepository orderCommodityRoadRepository;

	@Autowired
	private MQttUtil mQttUtil;

	@Autowired
	private BoxRepository boxRepository;

	// /**
	// * 用户看中商品,点击确定向服务器发送请求生成二维码
	// * @param box_id
	// * @param commodity_id
	// * @param commodity_num
	// * @return
	// */
	// @RequestMapping(value = "/createQRcode", method = RequestMethod.POST)
	// @ResponseBody
	// public Result createQRcode(Long box_id, Long commodity_id, Integer
	// commodity_num){
	// String code=Code.GWSCOD0000;
	// String message=Code.GWSMSG0000;
	// //参数判断
	// boolean bool= null== box_id || box_id<0 || null == commodity_id ||
	// commodity_id<0
	// || null == commodity_num || commodity_num<0;
	// if(bool){
	// return Result.setRetDate(Code.GWSCOD0003, Code.GWSMSG0003, null);
	// }
	// try {
	//
	// } catch (Exception e) {
	// // TODO: handle exception
	// }
	// return Result.setRetDate(code, message, object);
	// }
	//

	/**
	 * 用户选择数量,商品,扫描二维码生成订单 然后重定向到天点服务器支付
	 * 
	 * @param box_id
	 * @param commodity_id
	 * @param commodity_num
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/createOrder")
	public String createOrder(String ids, String $key, String state) {
		StringBuilder sb = new StringBuilder("redirect:");
		log.info("用户扫描二维码,进入生成订单流程");
		Map<String, String> params = new HashMap<String, String>();
		params.put("ids", ids);
		boolean ischecked = false;
		try {
			String _key = MacSignature.doHttpSignature(params, IndexController.secKey);
			if (_key.equals(IBase64.decode($key))) {
				ischecked = true;
			}
		} catch (InvalidKeyException e) {
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		if (!ischecked) {
			sb.append("/pages/tip_error.html?errMsg=参数错误");
			return sb.toString();
		}

		String jsonData = IBase64.decode(ids);
		Map<String, Object> json = (Map<String, Object>) JSON.parse(jsonData);
		System.out.println(json);
		Long box_id = Long.valueOf(String.valueOf(json.get("boxId")));
		
		Box box = boxRepository.findOne(box_id);
		List<BoxPort> boxPorts = box.getBoxPorts();
		if (null == boxPorts || boxPorts.size() < 0) {
			sb.append("/pages/tip_error.html?errMsg=参数错误");
			return sb.toString();
		}

		List<Map<String, Object>> _ids = (List<Map<String, Object>>) json.get("ids");
		Map<Long,Integer> saleRoadList=new HashMap<Long,Integer>();
		for (int i = 0; i < _ids.size(); i++) {
			Map<String, Object> mp = _ids.get(i);
			Long commodityId = Long.valueOf(String.valueOf(mp.get("commodityId")));
			Integer saleNum = Integer.valueOf(String.valueOf(mp.get("saleNum")));
			int _num = saleNum;
			List<CommodityRoad> listroad = commodityRoadRepository.findByBoxIdAndCommodityId(commodityId, box_id);
			for (int j = 0; j < listroad.size(); j++) {
				CommodityRoad road = listroad.get(j);
				int __num=0;
				if (_num > 0) {
						__num=(road.getCommodityNum() - 1);
						if(_num>=__num) {
							_num -= __num;
						}else if(_num<__num) {
							__num=_num;
							_num -= __num;
						}
				}
				if(__num>0) {
					saleRoadList.put(road.getCommodityRoadId(), __num);
				}
			}
			if(_num>0) {
				for (int j = 0; j < listroad.size(); j++) {
					CommodityRoad road = listroad.get(j);
					int __num=0;
					if (_num > 0) {
						__num=1;
						_num -= __num;
					}
					if(__num>0) {
						Integer __=saleRoadList.get(road.getCommodityRoadId());
						if(__==null) {
							__=0;
						}
						__num+=__;
						saleRoadList.put(road.getCommodityRoadId(), __num);
					}
				}
			}
		}
		System.out.println(JSON.toJSONString(saleRoadList));
		Order od = orderService.createOrder(saleRoadList, box);
		box=boxRepository.findOne(box.getBoxId());
		Map<String, Object> rt = new HashMap<String, Object>();
		rt.put("box", box);
		rt.put("BoxPort", box.getBoxPorts());
		rt.put("CommodityRoad", box.getCommodityRoads());
		Request bind = new Request();
		bind.setDataType(DataType.BINDBACK);
		bind.setDevice(box.getBoxCode());
		bind.setData(Request.Object2Bytes(rt));
		mQttUtil.sendP2P(bind);
		System.out.println(JSON.toJSONString(orderRepository.findOne(od.getOrderId())));
		sb.append("http://api.tiand99.net/box/box_order_pay.action?order=" +IBase64.encode(JSON.toJSONString(orderRepository.findOne(od.getOrderId())))+"&state="+state);
		return sb.toString();
	}
	// /**
	// * 用户选择数量,商品,扫描二维码生成订单 然后重定向到天点服务器支付
	// *
	// * @param box_id
	// * @param commodity_id
	// * @param commodity_num
	// * @return
	// */
	// @RequestMapping(value = "/createOrder")
	// public String createOrder(Long box_id, Long commodity_id, Integer
	// commodity_num) {
	// StringBuilder sb = new StringBuilder("redirect: ");
	// log.info("用户扫描二维码,进入生成订单流程");
	//
	// // 参数判断
	// boolean bool = null == box_id || box_id < 0 || null == commodity_id ||
	// commodity_id < 0 || null == commodity_num
	// || commodity_num < 0;
	// if (bool) {
	//
	// sb.append("/pages/tip_error_nostore.html?errMsg=参数错误");
	// return sb.toString();
	// }
	//
	// // 查询售货机端口号
	// BoxPort boxPort = boxPortRepository.findBoxPortByBoxId(box_id);
	// if (null == boxPort) {
	// sb.append("/pages/tip_error_nostore.html?errMsg=参数错误");
	// return sb.toString();
	// }
	//
	// // 查询此售货机是否有足够的商品
	// Long comNum =
	// commodityRoadRepository.findCommodityCountByBoxPortIdAndCommodityId(commodity_id,
	// boxPort.getBox_port_id());
	// if (comNum < commodity_num) {
	//
	// sb.append("/pages/tip_error.html");
	// return sb.toString();
	// }
	// // 生成订单
	//
	// try {
	// Order od = orderService.createOrder(commodity_id, commodity_num, box_id);
	// // 生成出货方案
	// List<CommodityRoad> list = commodityRoadRepository
	// .findCommodityRoadListByBoxPortIdAndCommodityId(commodity_id,
	// boxPort.getBox_port_id());
	// if (CollectionUtils.isNotEmpty(list)) {
	// List<OrderCommodityRoad> orderShippingLaneList = new
	// ArrayList<OrderCommodityRoad>();
	// Integer sumNumber = 0;
	// for (CommodityRoad commodityRoad : list) {
	// if (sumNumber < commodity_num) {
	// // 本售貨機存貨
	// Integer number = commodityRoad.getCommodity_num() - 1;
	// // 如果存貨大於需要的貨物,則此貨道出貨
	// Integer count = number >= commodity_num - sumNumber ? commodity_num -
	// sumNumber : number;
	//
	// // 创建订单货道表
	// OrderCommodityRoad orderShippingLane = new OrderCommodityRoad();
	// // 设置货道出货数量
	// orderShippingLane.setCommodity_num(count);
	// // 设置订单号
	// orderShippingLane.setOrder_id(od.getOrder_id());
	// // 设置柜机编号
	// orderShippingLane.setBox_id(box_id);
	// // 设置出货货道
	// orderShippingLane.setCommodity_road_id(commodityRoad.getCommodity_road_id());
	// // 设置删除状态
	// orderShippingLane.setIs_delete(IsDeleteEnum.UN_DELETE.getType());
	// // 保存
	// orderShippingLaneList.add(orderShippingLane);
	//
	// // 减少货到表的库存
	// commodityRoad.setCommodity_num(commodityRoad.getCommodity_num() - count);
	// sumNumber = sumNumber + count;
	// } else {
	// break;
	// }
	// }
	// // 如果出貨一轮后任然不夠,只有把每排剩餘的最后一个出货
	// if (sumNumber < commodity_num) {
	// for (CommodityRoad commodityRoad : list) {
	// if (sumNumber < commodity_num) {
	// // 创建订单货道表
	// OrderCommodityRoad orderShippingLane = new OrderCommodityRoad();
	// // 设置货道出货数量
	// orderShippingLane.setCommodity_num(commodityRoad.getCommodity_num());
	// // 设置订单号
	// orderShippingLane.setOrder_id(od.getOrder_id());
	// // 设置出货货道
	// orderShippingLane.setCommodity_road_id(commodityRoad.getCommodity_road_id());
	// orderShippingLaneList.add(orderShippingLane);
	//
	// // 减少货到表的库存
	// commodityRoad.setCommodity_num(0);
	// sumNumber = sumNumber + commodityRoad.getCommodity_num();
	// } else {
	// break;
	// }
	// }
	// }
	// boolean b = transactionService.shippingOptions(list,
	// orderShippingLaneList);
	// if (b) {
	// sb.append("http://192.168.56.1/order/findOrderById?order_id=" +
	// od.getOrder_id());
	// return sb.toString();
	// }
	// }
	//
	// } catch (Exception e) {
	// // 重定向到天点服务器
	// sb.append("/pages/tip_error_nostore.html? errMsg=系统异常");
	// return sb.toString();
	// }
	// // 前端将生成的信息发送到字符服务器,调支付系统完成支付,然后调用发货系统
	// return sb.toString();
	// }

	// /**
	// * 用户支付完成,调用发货流程,选择发货货道 根据售货机编号,商品编号选择商品最多的售货机出货
	// *
	// * @param box_id
	// * @param commodity_id
	// * @return
	// */
	// @RequestMapping(value = "/shippingOptions", method = RequestMethod.POST)
	// @ResponseBody
	// public Result shippingOptions(Long box_id, Long commodity_id, Long
	// order_id, Integer num) {
	//
	// // 参数检查
	// if (null == box_id || null == commodity_id || null == num) {
	// return Result.setRetDate(Code.GWSCOD0003, Code.GWSMSG0003, null);
	// }
	// // 订单检查
	// Order dbOrder = orderRepository.findOne(order_id);
	// if (null == dbOrder || null == dbOrder.getPay_time()) {
	// return Result.setRetDate(Code.GWSCOD0004, Code.GWSMSG0004, null);
	// }
	// // 根据售货机编号查询串口号
	// try {
	// BoxPort boxPort = boxPortRepository.findBoxPortByBoxId(box_id);
	// if (null != boxPort) {
	// List<CommodityRoad> list = commodityRoadRepository
	// .findCommodityRoadListByBoxPortIdAndCommodityId(commodity_id,
	// boxPort.getBox_port_id());
	//
	// if (CollectionUtils.isNotEmpty(list)) {
	// List<OrderShippingLane> orderShippingLaneList = new
	// ArrayList<OrderShippingLane>();
	// Integer sumNumber = 0;
	// for (CommodityRoad commodityRoad : list) {
	// if (sumNumber < num) {
	// // 本售貨機存貨
	// Integer number = commodityRoad.getCommodity_num() - 1;
	// // 如果存貨大於需要的貨物,則此貨道出貨
	// Integer count = number >= num - sumNumber ? num - sumNumber : number;
	//
	// // 创建订单货道表
	// OrderShippingLane orderShippingLane = new OrderShippingLane();
	// // 设置货道出货数量
	// orderShippingLane.setCommodity_num(count);
	// // 设置订单号
	// orderShippingLane.setOrder_id(order_id);
	// // 设置出货货道
	// orderShippingLane.setCommodity_road_id(commodityRoad.getCommodity_road_id());
	// orderShippingLaneList.add(orderShippingLane);
	//
	// // 减少货到表的库存
	// commodityRoad.setCommodity_num(commodityRoad.getCommodity_num() - count);
	// sumNumber = sumNumber + count;
	// } else {
	// break;
	// }
	// }
	// // 如果出貨一轮后任然不夠,只有把每排剩餘的最后一个出货
	// if (sumNumber < num) {
	// for (CommodityRoad commodityRoad : list) {
	// if (sumNumber < num) {
	// // 创建订单货道表
	// OrderShippingLane orderShippingLane = new OrderShippingLane();
	// // 设置货道出货数量
	// orderShippingLane.setCommodity_num(commodityRoad.getCommodity_num());
	// // 设置订单号
	// orderShippingLane.setOrder_id(order_id);
	// // 设置出货货道
	// orderShippingLane.setCommodity_road_id(commodityRoad.getCommodity_road_id());
	// orderShippingLaneList.add(orderShippingLane);
	//
	// // 减少货到表的库存
	// commodityRoad.setCommodity_num(0);
	// sumNumber = sumNumber + commodityRoad.getCommodity_num();
	//
	// } else {
	// break;
	// }
	//
	// }
	// }
	// boolean b = transactionService.shippingOptions(list,
	// orderShippingLaneList);
	//
	// if (b) {
	// // 调控制售货机的sdk,
	// //TODO
	//
	// return Result.setRetDate(Code.GWSCOD0000, Code.GWSMSG0000, null);
	// }
	//
	// }
	//
	// }
	// } catch (Exception e) {
	// return Result.setRetDate(Code.GWSCOD0001, Code.GWSMSG0001, null);
	// }
	//
	// return Result.setRetDate(Code.GWSCOD0000, Code.GWSMSG0000, false);
	// }
	/**
	 * 支付成功后天点服务器回调接口
	 * 
	 * @param orderId
	 * @param pay_time
	 * @param isTrue
	 *            1是(成功)2否(不成功)
	 */
	@RequestMapping(value = "/shippingOptions", method = RequestMethod.GET)
	@ResponseBody
	public Result shippingOptions(Long orderId, Long payTime, Short isTrue) {
		// List<OrderCommodityRoad> orderCommodityList =
		// orderCommodityRoadRepository.getOrderCommodityRoadListByOrderId(order_id);
		// Order dbOrder = orderRepository.findOne(order_id);
		// Request request=new Request();
		// Box b=boxRepository.findOne(dbOrder.getBox_id());
		// // 查询出货方案
		// String ss = JSONObject.toJSONString(orderCommodityList);
		// request.setDevice("DLA364");
		// request.setDataType(DataType.BIND);
		// request.setData("nihao,zheshidiyigemq".getBytes());
		// mQttUtil.sendP2P(request);
		
		
		
		

		// 参数判断
		boolean bool = null == orderId || orderId < 0 || null == payTime || payTime < 0 || null == isTrue || isTrue < 0;
		if (bool) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0003);
			message.setErrmsg(Code.GWSMSG0003);
			return Result.setData(Success.FALSE.getDescription(), message);
		}

		// 查询订单
		Order dbOrder = orderRepository.findOne(orderId);
		if (null == dbOrder) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0003);
			message.setErrmsg(Code.GWSMSG0003);
			return Result.setData(Success.FALSE.getDescription(), message);
		}
		
		List<OrderCommodityRoad> roadlist = dbOrder.getOrderCommodityRoads();
		if (CollectionUtils.isNotEmpty(roadlist)) {
			if (isTrue == 1) {
				OrderStateRcd orderStateRcd = orderStateRcdRepository.getOrderStateRcdByOrderId(orderId);
				orderStateRcd.setOrderStateId(OrderStatusEnum.WAITING_FOR_SHIPMENT.getType());
				orderStateRcdService.saveOrderStateRcd(orderStateRcd); // 保存
			}
			
			
		}
		
		
		// 查询生成的出货方案
//		List<OrderCommodityRoad> orderCommodityList = orderCommodityRoadRepository
//				.getOrderCommodityRoadListByOrderId(orderId);

//		if (CollectionUtils.isNotEmpty(orderCommodityList)) {
//			if (isTrue == 1) { // 支付成功
//				// 更改订单状态
//				OrderStateRcd orderStateRcd = orderStateRcdRepository.getOrderStateRcdByOrderId(orderId);
//				orderStateRcd.setOrderStateId(OrderStatusEnum.WAITING_FOR_SHIPMENT.getType());
//				orderStateRcdService.saveOrderStateRcd(orderStateRcd); // 保存
//
//				// 发送数据
//				List<Map<String, Object>> responseList = new ArrayList<Map<String, Object>>();
//				for (OrderCommodityRoad orderCommodityRoad : orderCommodityList) {
//					CommodityRoad commodityRoad = commodityRoadRepository
//							.findOne(orderCommodityRoad.getCommodityRoadId());
//					Map<String, Object> map = new HashMap<String, Object>();
//					// 订单号
////					map.put("orderId", orderCommodityRoad.getOrderId());
//					// 货道编码
//					map.put("code", commodityRoad.getCode());
//					// 数量
//					map.put("number", orderCommodityRoad.getCommodityNum());
//					responseList.add(map);
//				}
//				Box b = boxRepository.findOne(dbOrder.getBoxId());
//				// 查询出货方案
//				String ss = JSONObject.toJSONString(responseList);
//				Request request = new Request();
//				request.setDevice(b.getBoxCode());
//				request.setDataType(DataType.CONTROL_INSTRUCTION);
//				request.setData(ss.getBytes());
//				mQttUtil.sendP2P(request);
//			} else if (isTrue == 2) {// 不成功,还库存
////				List<CommodityRoad> newCommodityRoadList = new ArrayList<CommodityRoad>();
////				List<OrderCommodityRoad> newOrderCommodityRoadList = new ArrayList<OrderCommodityRoad>();
////				List<CommodityRoad> commodityRoadList = commodityRoadRepository
////						.findCommodityRoadListByBoxPortIdAndCommodityId(dbOrder.getCommodityId(), dbOrder.getBoxId());
////				if (CollectionUtils.isNotEmpty(commodityRoadList)) {
////					for (OrderCommodityRoad orderCommodityRoad : orderCommodityList) {
////						for (CommodityRoad commodityRoad : commodityRoadList) {
////							if (orderCommodityRoad.getCommodityRoadId().equals(commodityRoad.getCommodityRoadId())) {
////								// 还库存
////								commodityRoad.setCommodityNum(
////										commodityRoad.getCommodityNum() + orderCommodityRoad.getCommodityNum());
////								newCommodityRoadList.add(commodityRoad);
////								// 订单方案作废
////								orderCommodityRoad.setIsDelete(IsDeleteEnum.DELETE.getType());
////								newOrderCommodityRoadList.add(orderCommodityRoad);
////								boolean b = transactionService.shippingOptionsList(newCommodityRoadList,
////										newOrderCommodityRoadList);
////								if (b) {
////									return Result.setData(Success.TRUE.getDescription(), b);
////
////								}
////							}
////						}
////					}
////
////				}
//			}
//		}
		return Result.setData(Success.TRUE.getDescription(), null);

	}

	/**
	 * 出货不成功,退订单 1,请求支付服务器退款 2,改回库存数量 3.记录异常日志
	 * 
	 * @param order_id
	 */
	@RequestMapping(value = "/refundOrder", method = RequestMethod.POST)
	@ResponseBody
	public Result refundOrder(Long order_id, Short isTrue) {
		// 检查参数
		if (null == order_id || order_id < 0) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0003);
			message.setErrmsg(Code.GWSMSG0003);
			return Result.setData(Success.FALSE.getDescription(), message);
		}
		// 检查订单是否存在,以及支付状态
		Order order = orderRepository.findOne(order_id);
		if (null == order || null == order.getPayTime()) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0003);
			message.setErrmsg(Code.GWSMSG0003);
			return Result.setData(Success.FALSE.getDescription(), message);
		}
		// 出货反馈后流程
		if (isTrue == 1) {// 成功

		} else if (isTrue == 2) {

		}

		return Result.setData(Success.TRUE.getDescription(), null);
	}

}
