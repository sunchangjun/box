package framework.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;

import framework.common.jpa.Query;
import framework.common.jpa.Select;
import framework.common.result.Code;
import framework.common.result.Message;
import framework.common.result.Result;
import framework.dao.BoxRepository;
import framework.dao.CommodityCateRepository;
import framework.dao.CommodityRepository;
import framework.dao.ImageResourceRepository;
import framework.entity.po.Box;
import framework.entity.po.Commodity;
import framework.entity.po.CommodityCate;
import framework.entity.po.ImageResource;
import framework.enums.IsDeleteEnum;
import framework.mqtt.MQttUtil;
import framework.pojo.DataType;
import framework.pojo.Request;
import framework.service.CommodityService;

@Controller
@RequestMapping("/commodity")
public class CommodityController {
	private static Logger log = LoggerFactory.getLogger(CommodityController.class);

	@Autowired
	private CommodityRepository commodityRepository;

	@Autowired
	private CommodityService commodityService;

	@Autowired
	private ImageResourceRepository imageResourceRepository;
	
	@Autowired
	private CommodityCateRepository commodityCateRepository;
	
	@Autowired
	private MQttUtil mQttUtil;
	
	@Autowired
	private BoxRepository boxRepository;
	
	/**
	 * 添加或修改商品
	 * 
	 * @param commodity_id
	 * @param commodity_name
	 * @param price
	 * @param stocks
	 * @param commodity_desc
	 * @return
	 */
	@RequestMapping(value = "/createOrUpdateCommodity")
	@ResponseBody
	public Result createOrUpdateCommodity( String request) {
		if(StringUtils.isBlank(request)) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0003);
			message.setErrmsg(Code.GWSMSG0003);
			return Result.setData(false, message);
		}		
		Commodity commodity=	JSONObject.parseObject(request, Commodity.class);
		
		// 参数判断
		boolean bool=StringUtils.isBlank(commodity.getCommodityName()) || null ==commodity.getPrice() || null ==commodity.getStocks()|| null==commodity.getClassification()  ;
		if (bool) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0003);
			message.setErrmsg(Code.GWSMSG0003);
			return Result.setData(false, message);
		}
//		Commodity newCommodity = null;
//		if (null != commodity.getCommodityId()) {// 修改
//			newCommodity = commodityRepository.findOne(commodity.getCommodityId());
//			// 加库存
//			newCommodity.setStocks(commodity.getStocks() + commodity.getStocks());
//		} else {// 新增
//			 newCommodity = new Commodity();
//			 newCommodity.setStocks(commodity.getStocks());
//			 newCommodity.setCreateTime(new Date().getTime());
//			 newCommodity.setEnabled(IsDeleteEnum.UN_DELETE.getType());
//		}
//		newCommodity.setPrice(commodity.getPrice());
//		newCommodity.setCommodityName(commodity.getCommodityName());
//		newCommodity.setCommodityDesc(commodity.getCommodityDesc());
//	
		// 保存
		Commodity dbReturnCommodity = null;
		Map<String,Object> map=new HashMap<String,Object>();
		try {
			//保存商品信息
			dbReturnCommodity = commodityService.saveCommodity(commodity);
			if(null != dbReturnCommodity) {
				map.put("commodity", dbReturnCommodity);
				//保存图片信息
				if(CollectionUtils.isNotEmpty(commodity.getImageResources())) {
					List<ImageResource> iList=commodity.getImageResources();
					List<ImageResource> imageResourceList=imageResourceRepository.save(iList);	
					if(CollectionUtils.isNotEmpty(imageResourceList)) {
						map.put("imageResource", imageResourceList);
					}
				}
			}
		
			if(null != dbReturnCommodity) {
				//发送MQ到所有柜机
				List<String> boxCodeList=getAllBoxCode();
				if(CollectionUtils.isNotEmpty(boxCodeList)) {
					for (String string : boxCodeList) {
						List<Long>commodityIdList= getBoxCommodityIdList(string);
						if(commodityIdList.contains(dbReturnCommodity.getCommodityId())) {
							Request bind = new Request();
							bind.setDataType(DataType.COMMODITY);
							bind.setDevice(string);
							bind.setData(Request.Object2Bytes(map));
							mQttUtil.sendP2P(bind);
						}
					}
					
				}
			}
	
			
		} catch (Exception e) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0001);
			message.setErrmsg(Code.GWSMSG0001);
			return Result.setData(false, message);
		}
		return Result.setData(true, dbReturnCommodity);
	}
	
	public List<CommodityCate> findCommodityCateList(){
		List<CommodityCate> list=commodityCateRepository.findAll();
		return list;
	}
	
	
	//查询售货机下有的商品id
	public List<Long> getBoxCommodityIdList(String boxCode){
		
		List<Object> list=commodityRepository.getBoxCommodityIdList(boxCode);
		List<Long> idList=new ArrayList<Long>();
		if(CollectionUtils.isNotEmpty(list)) {
			for (int i=0;i< list.size();i++) {
				if(null != list.get(i)) {					
						String objects=list.get(i).toString();
						if(null != objects) {
							idList.add(Long.valueOf(objects));
						}				
				}
				
				
			
				
			}
		}
		return idList;
	}
	
	//查询所有柜机的boxcode
	public List<String> getAllBoxCode(){
		List<String> list=new  ArrayList<String>();
		List<Box> boxList=boxRepository.findAll();
		if(CollectionUtils.isNotEmpty(boxList)) {
			for (Box box : boxList) {
				list.add(box.getBoxCode());
			}		
		}
		return  list;
	}
	
	//-------------------------------------------------------------------------------------------------
	
	/**
	 * 查询商品列表
	 * 
	 * @param page
	 * @param rows
	 * @return
	 */
	@RequestMapping(value = "/findCommodity")
	@ResponseBody
	public Result findCommodity(Integer page, Integer rows,Short isEnabled,Long classification,String commodityName) {
		// 参数判断
		if (null == page || null == rows) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0003);
			message.setErrmsg(Code.GWSMSG0003);
			return Result.setData(false, message);
		}

		// 查询商品
		Page<Commodity> pages = null;
		try {
			Query<Commodity> query=new  Query<Commodity>();
			if(null != isEnabled) {
				query.add(Select.eq("enabled", isEnabled));
			}
			if(null != classification) {
				query.add(Select.eq("classification", classification));
			}
			if(StringUtils.isNotBlank(commodityName)) {
				query.add(Select.eq("commodityName", commodityName));
			}
			Pageable pageable = new PageRequest(page - 1, rows);
			pages = commodityRepository.findAll(query,pageable);
			List<Long> commodityIdList = new ArrayList<Long>();
			List<CommodityCate> CommodityCateList=findCommodityCateList();
			if (CollectionUtils.isNotEmpty(pages.getContent())) {
				for (Commodity commodity : pages.getContent()) {
					if(CollectionUtils.isNotEmpty(CommodityCateList)) {
						for (CommodityCate commodityCate : CommodityCateList) {
							if(commodityCate.getCommodityCateId().equals(commodity.getClassification())) {
								//添加从数据库中查询的分类名称
								commodity.setClassificationStr(commodityCate.getCommodityCateName());
							}
						}
					}
					commodityIdList.add(commodity.getCommodityId());
				}
				List<ImageResource> imageResourceList = imageResourceRepository
						.getImageResourceListByCommodity(commodityIdList);

				if (CollectionUtils.isNotEmpty(imageResourceList)) {
				
					for (Commodity commodity : pages.getContent()) {
						List<ImageResource> newImageResourceList = new ArrayList<ImageResource>();
						for (ImageResource imageResource : imageResourceList) {
							if (commodity.getCommodityId().equals(imageResource.getCommodityId())) {
								newImageResourceList.add(imageResource);
							}

						}
						if(CollectionUtils.isNotEmpty(newImageResourceList)) {
							commodity.setImageResources(newImageResourceList);
						}
					
					}
				}

			}

		} catch (Exception e) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0001);
			message.setErrmsg(Code.GWSMSG0001);
			return Result.setData(false, message);
		}

		return Result.setData(true, pages);
	}
	//--------------------------------------------------------------------------------
	/**
	 * 查询单个商品信息
	 * @param commodityId
	 * @return
	 */
	@RequestMapping(value = "/getOneCommodity", method = RequestMethod.POST)
	@ResponseBody
	public Result getOneCommodity(Long commodityId) {
		if(null == commodityId) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0003);
			message.setErrmsg(Code.GWSMSG0003);
			return Result.setData(false, message);
		}
		Commodity dbCommodity=null;
		try {
			dbCommodity=	commodityRepository.findOne(commodityId);
			if(null != dbCommodity) {			
			List<ImageResource> imageResourceList=	imageResourceRepository.getImageResourceByCommodity(commodityId);
			dbCommodity.setImageResources(imageResourceList);
			}
		} catch (Exception e) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0001);
			message.setErrmsg(Code.GWSMSG0001);
			return Result.setData(false, message);
		}
		return Result.setData(true, dbCommodity);
	}


//---------------------------------------------------------------------------------------------------

	/**
	 * 删除商品
	 * 
	 * @param commodity_id
	 * @return
	 */
	@RequestMapping(value = "/deleteCommodity", method = RequestMethod.POST)
	@ResponseBody
	public Result deleteCommodity(Long commodity_id) {
		// 参数判断
		if (null == commodity_id || commodity_id < 0) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0003);
			message.setErrmsg(Code.GWSMSG0003);
			return Result.setData(false, message);
		}
		boolean bool = false;
		try {
			Commodity commodity = commodityRepository.findOne(commodity_id);
			if (null != commodity) {
				commodity.setEnabled(IsDeleteEnum.DELETE.getType());
				Commodity dbReturnCommodity = commodityService.saveCommodity(commodity);
				if (null != dbReturnCommodity) {
					bool = true;
					
					//发送MQ到所有柜机
					List<String> boxCodeList=getAllBoxCode();
					if(CollectionUtils.isNotEmpty(boxCodeList)) {
						for (String string : boxCodeList) {
							List<Long>commodityIdList= getBoxCommodityIdList(string);
							if(commodityIdList.contains(dbReturnCommodity.getCommodityId())) {
								Request bind = new Request();
								bind.setDataType(DataType.COMMODITY);
								bind.setDevice(string);
								bind.setData(Request.Object2Bytes(dbReturnCommodity));
								mQttUtil.sendP2P(bind);
							}
						}
						
					}
				}

			}
		} catch (Exception e) {
			Message message = new Message();
			message.setErrno(Code.GWSCOD0001);
			message.setErrmsg(Code.GWSMSG0001);
			return Result.setData(false, message);
		}

		return Result.setData(true, bool);
	}

}
